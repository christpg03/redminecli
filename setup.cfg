[metadata]
name = redminecli
version = 0.1.0
description = A command line interface for Redmine
long_description = file: README.md
long_description_content_type = text/markdown
url = https://github.com/yourusername/redminecli
author = Christian
author_email = your.email@example.com
license = MIT
license_file = LICENSE
classifiers =
    Development Status :: 3 - Alpha
    Intended Audience :: Developers
    License :: OSI Approved :: MIT License
    Operating System :: OS Independent
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.10
    Programming Language :: Python :: 3.11
    Programming Language :: Python :: 3.12
    Topic :: Software Development :: Libraries :: Python Modules
    Topic :: Office/Business :: Groupware
keywords = redmine, cli, api, project-management

[options]
packages = find:
python_requires = >=3.8
install_requires =
    click>=8.0.0
    python-redmine>=2.5.0
    requests>=2.25.0
include_package_data = True
zip_safe = False

[options.packages.find]
exclude =
    tests*

[options.extras_require]
dev =
    pytest>=6.0
    pytest-cov
    black
    flake8
    mypy
    isort

[options.entry_points]
console_scripts =
    redmine = cli.cli:cli

[flake8]
max-line-length = 88
extend-ignore = E203, W503
exclude =
    .git,
    __pycache__,
    .pytest_cache,
    .mypy_cache,
    build,
    dist,
    *.egg-info

[isort]
profile = black
multi_line_output = 3
line_length = 88
known_first_party = cli

[mypy]
python_version = 3.8
warn_return_any = True
warn_unused_configs = True
disallow_untyped_defs = True
disallow_incomplete_defs = True
check_untyped_defs = True
disallow_untyped_decorators = True
no_implicit_optional = True
warn_redundant_casts = True
warn_unused_ignores = True
warn_no_return = True
warn_unreachable = True
strict_equality = True

[tool:pytest]
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*
addopts = --cov=cli --cov-report=term-missing --cov-report=html

[coverage:run]
source = cli
omit = */tests/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
